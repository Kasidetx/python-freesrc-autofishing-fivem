# -*- coding: utf-8 -*-
# smart_build_fixed.py ‚Äî ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå build ‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç PyArmor compatibility
import subprocess
import sys
import ast
import re
from pathlib import Path

def run_cmd(cmd, errmsg):
    """‡∏£‡∏±‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏ö error"""
    try:
        print(f"üîÑ Run: {' '.join(cmd)}")
        result = subprocess.run(cmd, check=True, capture_output=True, text=True)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error: {errmsg}")
        print(f"   Command: {' '.join(cmd)}")
        print(f"   Exit code: {e.returncode}")
        if e.stdout:
            print(f"   Stdout: {e.stdout}")
        if e.stderr:
            print(f"   Stderr: {e.stderr}")
        return False

def check_pyarmor_version():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏Ç‡∏≠‡∏á PyArmor"""
    try:
        result = subprocess.run(['pyarmor', '--version'], capture_output=True, text=True)
        if result.returncode == 0:
            version = result.stdout.strip()
            print(f"üìã PyArmor version: {version}")
            return version
        else:
            print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô PyArmor")
            return None
    except Exception as e:
        print(f"‚ö†Ô∏è  Error checking PyArmor version: {e}")
        return None

def get_pyarmor_help():
    """‡∏î‡∏π help ‡∏Ç‡∏≠‡∏á PyArmor ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö arguments ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ"""
    try:
        result = subprocess.run(['pyarmor', 'gen', '--help'], capture_output=True, text=True)
        if result.returncode == 0:
            return result.stdout
        return ""
    except:
        return ""

def extract_imports_from_file(file_path):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå Python ‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á imports ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    imports = set()
    
    try:
        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
            content = f.read()
    except:
        try:
            with open(file_path, 'r', encoding='cp1252', errors='ignore') as f:
                content = f.read()
        except:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå: {file_path}")
            return imports
    
    # Method 1: ‡πÉ‡∏ä‡πâ AST (Abstract Syntax Tree)
    try:
        tree = ast.parse(content)
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    if alias.name and alias.name.strip():
                        imports.add(alias.name.strip())
            elif isinstance(node, ast.ImportFrom):
                if node.module and node.module.strip():
                    module_name = node.module.strip()
                    imports.add(module_name)
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° submodules ‡∏î‡πâ‡∏ß‡∏¢
                    for alias in node.names:
                        if alias.name and alias.name != '*' and alias.name.strip():
                            full_name = f"{module_name}.{alias.name.strip()}"
                            imports.add(full_name)
    except SyntaxError:
        print(f"‚ö†Ô∏è  Syntax error ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå: {file_path}, ‡πÉ‡∏ä‡πâ regex ‡πÅ‡∏ó‡∏ô")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error parsing {file_path}: {e}")
    
    # Method 2: ‡πÉ‡∏ä‡πâ Regular Expression ‡πÄ‡∏õ‡πá‡∏ô backup
    import_patterns = [
        r'^\s*import\s+([a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)',
        r'^\s*from\s+([a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)\s+import',
        r'__import__\([\'"]([a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)[\'"]',
        r'importlib\.import_module\([\'"]([a-zA-Z_][a-zA-Z0-9_]*(?:\.[a-zA-Z_][a-zA-Z0-9_]*)*)[\'"]'
    ]
    
    for pattern in import_patterns:
        matches = re.finditer(pattern, content, re.MULTILINE)
        for match in matches:
            module_name = match.group(1).strip()
            if module_name and not module_name.startswith('#'):
                imports.add(module_name)
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î imports
    cleaned_imports = set()
    for imp in imports:
        if imp and imp.strip() and not imp.startswith('.') and imp.replace('.', '').replace('_', '').isalnum():
            cleaned_imports.add(imp.strip())
    
    return cleaned_imports

def get_all_imports_from_project(project_path, exclude_files=None):
    """‡∏î‡∏∂‡∏á imports ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå"""
    if exclude_files is None:
        exclude_files = {'build.py', 'smart_build.py', 'smart_build_fixed.py', 'setup.py'}
    
    all_imports = set()
    py_files = []
    
    # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå .py ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    for py_file in project_path.rglob('*.py'):
        if py_file.name not in exclude_files and 'venv' not in str(py_file) and '__pycache__' not in str(py_file):
            py_files.append(py_file)
            print(f"üìÅ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå: {py_file}")
            file_imports = extract_imports_from_file(py_file)
            all_imports.update(file_imports)
    
    return all_imports, py_files

def filter_standard_library_modules(imports):
    """‡∏Å‡∏£‡∏≠‡∏á modules ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô standard library"""
    import sys
    
    # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ standard library modules ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
    known_stdlib = {
        'os', 'sys', 'subprocess', 'pathlib', 'json', 'io', 'shutil', 'tempfile',
        'urllib', 'http', 'ssl', 'socket', 'datetime', 'time', 'calendar',
        'threading', 'multiprocessing', 'concurrent', 'asyncio', 're', 'base64',
        'hashlib', 'hmac', 'uuid', 'random', 'secrets', 'zipfile', 'tarfile',
        'gzip', 'bz2', 'lzma', 'platform', 'signal', 'atexit', 'argparse',
        'configparser', 'logging', 'traceback', 'warnings', 'pdb', 'math',
        'decimal', 'fractions', 'statistics', 'collections', 'itertools',
        'functools', 'operator', 'copy', 'codecs', 'unicodedata', 'textwrap',
        'string', 'tkinter', 'pickle', 'csv', 'xml', 'html', 'email',
        'mimetypes', 'sqlite3', 'dbm', 'shelve', 'marshal', 'types',
        'inspect', 'dis', 'gc', 'weakref', 'array', 'struct', 'keyword',
        'ast', 'symtable', 'token', 'tokenize', 'tabnanny', 'pyclbr',
        'compileall', 'py_compile', 'importlib', 'pkgutil', 'modulefinder',
        'runpy', 'fileinput', 'linecache', 'filecmp', 'glob', 'fnmatch',
        'getopt', 'optparse', 'getpass', 'curses', 'locale', 'cmd', 'shlex',
        'ctypes', 'wmi', 'dataclasses', 'typing'
    }
    
    # Windows-specific modules
    if sys.platform == 'win32':
        known_stdlib.update({'winreg', 'winsound', 'msvcrt'})
    else:
        known_stdlib.update({'pwd', 'grp', 'crypt', 'termios', 'tty', 'pty', 'fcntl'})
    
    stdlib_imports = set()
    third_party_imports = set()
    
    for imp in imports:
        if not imp or not imp.strip() or imp.startswith('.'):
            continue
        
        root_module = imp.split('.')[0].strip()
        
        if not root_module or root_module.isdigit() or not root_module.isidentifier():
            continue
        
        if root_module in known_stdlib:
            stdlib_imports.add(imp)
        else:
            try:
                module = __import__(root_module)
                if hasattr(module, '__file__') and module.__file__:
                    if 'site-packages' in module.__file__ or 'dist-packages' in module.__file__:
                        third_party_imports.add(imp)
                    else:
                        stdlib_imports.add(imp)
                else:
                    stdlib_imports.add(imp)
            except (ImportError, ValueError, AttributeError):
                third_party_imports.add(imp)
    
    return stdlib_imports, third_party_imports

def create_comprehensive_imports_file(all_imports, project_path):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå imports.py ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°"""
    stdlib_imports, third_party_imports = filter_standard_library_modules(all_imports)
    
    imports_content = '''# -*- coding: utf-8 -*-
# auto_imports.py - Auto-generated comprehensive imports file
"""
‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏° imports ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå
"""

import sys
import warnings
warnings.filterwarnings('ignore')

# Standard Library Imports
'''
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° standard library imports
    for imp in sorted(stdlib_imports):
        root_module = imp.split('.')[0]
        imports_content += f'''
try:
    import {imp}
except ImportError as e:
    print(f"Warning: Cannot import {imp}: {{e}}")
    {root_module} = None'''
    
    imports_content += '''

# Third-party Library Imports
'''
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° third-party imports
    for imp in sorted(third_party_imports):
        root_module = imp.split('.')[0]
        imports_content += f'''
try:
    import {imp}
except ImportError as e:
    print(f"Warning: Cannot import {imp}: {{e}}")
    {root_module} = None'''
    
    imports_content += f'''

# Export all imported modules
__all__ = {sorted(list(all_imports))}

print("‚úÖ Auto-imports loaded: {len(all_imports)} modules")
'''
    
    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå
    imports_file = project_path / 'auto_imports.py'
    with open(imports_file, 'w', encoding='utf-8') as f:
        f.write(imports_content)
    
    print(f"üìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå: {imports_file}")
    print(f"   - Standard Library: {len(stdlib_imports)} modules")
    print(f"   - Third-party: {len(third_party_imports)} modules")
    
    return imports_file, stdlib_imports, third_party_imports

def clean_pyarmor_dist(project_path):
    """‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î pyarmor_dist directory"""
    dist_path = project_path / 'pyarmor_dist'
    if dist_path.exists():
        import shutil
        try:
            shutil.rmtree(dist_path)
            print("üóëÔ∏è  ‡∏•‡∏ö pyarmor_dist ‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡πâ‡∏ß")
        except Exception as e:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö pyarmor_dist: {e}")

def build_with_pyarmor_compatible(py_files, pack_modules, project_path):
    """Build ‡∏î‡πâ‡∏ß‡∏¢ PyArmor ‡∏ó‡∏µ‡πà compatible ‡∏Å‡∏±‡∏ö‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ"""
    
    # ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Å‡πà‡∏≠‡∏ô
    clean_pyarmor_dist(project_path)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PyArmor help
    help_text = get_pyarmor_help()
    
    # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏Å‡πà‡∏≠‡∏ô
    print("üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ PyArmor ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢...")
    py_files_str = [str(f) for f in py_files]
    
    simple_cmd = [
        'pyarmor', 'gen',
        '-O', 'pyarmor_dist'
    ] + py_files_str
    
    if run_cmd(simple_cmd, 'PyArmor simple command ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'):
        print("‚úÖ PyArmor simple command ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        return True
    
    print("üîÑ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ PyArmor ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î...")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á command ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    cmd_pyarmor = [
        'pyarmor', 'gen',
        '-O', 'pyarmor_dist'
    ]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° pack modules (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ command line ‡∏¢‡∏≤‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ)
    limited_modules = list(pack_modules)[:20]  # ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏•‡∏á
    if limited_modules:
        cmd_pyarmor.extend(['--pack', ','.join(limited_modules)])
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° arguments ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö (‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏≥)
    if '--mix-str' in help_text:
        cmd_pyarmor.append('--mix-str')
        print("‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö --mix-str")
    
    if '--assert-call' in help_text:
        cmd_pyarmor.append('--assert-call')
        print("‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö --assert-call")
    
    if '--assert-import' in help_text:
        cmd_pyarmor.append('--assert-import')
        print("‚úÖ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö --assert-import")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ü‡∏•‡πå Python
    cmd_pyarmor.extend(py_files_str)
    
    return run_cmd(cmd_pyarmor, 'PyArmor detailed command ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß')

def fix_pyarmor_runtime_imports(project_path):
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç imports ‡πÉ‡∏ô pyarmor_dist files"""
    dist_path = project_path / 'pyarmor_dist'
    if not dist_path.exists():
        return False
    
    # ‡∏´‡∏≤ runtime directory
    runtime_dirs = list(dist_path.glob('pyarmor_runtime_*'))
    if not runtime_dirs:
        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö pyarmor_runtime directory")
        return False
    
    runtime_dir = runtime_dirs[0]
    runtime_name = runtime_dir.name
    print(f"üîç ‡∏û‡∏ö runtime: {runtime_name}")
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç imports ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    fixed_count = 0
    for py_file in dist_path.glob('*.py'):
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà import statements ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
            old_import = f"from {runtime_name} import __pyarmor__"
            new_import = f"from {runtime_name} import __pyarmor__"
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö import ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            import_patterns = [
                (rf'from {runtime_name} import \*\*pyarmor\*\*', f'from {runtime_name} import __pyarmor__'),
                (rf'from {runtime_name} import \*pyarmor\*', f'from {runtime_name} import __pyarmor__'),
                (rf'import \*\*pyarmor\*\*', f'from {runtime_name} import __pyarmor__')
            ]
            
            modified = False
            for old_pattern, new_pattern in import_patterns:
                if re.search(old_pattern, content):
                    content = re.sub(old_pattern, new_pattern, content)
                    modified = True
            
            if modified:
                with open(py_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                fixed_count += 1
                print(f"üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {py_file.name}")
        
        except Exception as e:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {py_file.name}: {e}")
    
    if fixed_count > 0:
        print(f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç imports ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {fixed_count} ‡πÑ‡∏ü‡∏•‡πå")
    
    return True

def main():
    print("üöÄ Smart PyArmor Build Script (Fixed Version)")
    print("=" * 60)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PyArmor
    version = check_pyarmor_version()
    if not version:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö PyArmor ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ")
        print("üí° ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á‡∏î‡πâ‡∏ß‡∏¢: pip install pyarmor")
        sys.exit(1)
    
    project_path = Path(__file__).parent
    
    # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå imports ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    print("\nüìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå imports ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå...")
    all_imports, py_files = get_all_imports_from_project(project_path)
    
    if not py_files:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .py ‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå")
        sys.exit(1)
    
    print(f"‚úÖ ‡∏û‡∏ö {len(all_imports)} imports ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
    print(f"‚úÖ ‡∏û‡∏ö {len(py_files)} ‡πÑ‡∏ü‡∏•‡πå Python")
    
    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå imports
    print("\nüìù ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå auto_imports.py...")
    imports_file, stdlib_imports, third_party_imports = create_comprehensive_imports_file(all_imports, project_path)
    
    # 3. ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PyArmor
    print("\n‚öôÔ∏è  ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PyArmor...")
    if not run_cmd(['pyarmor', 'cfg', 'encoding=utf-8'], '‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ encoding ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'):
        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ encoding, ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠...")
    
    # 4. Obfuscate ‡∏î‡πâ‡∏ß‡∏¢ PyArmor
    print("\nüîê Obfuscating ‡∏î‡πâ‡∏ß‡∏¢ PyArmor...")
    
    # ‡∏£‡∏ß‡∏°‡πÑ‡∏ü‡∏•‡πå auto_imports.py ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    all_py_files = py_files + [imports_file]
    
    # ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà compatible
    if not build_with_pyarmor_compatible(all_py_files, stdlib_imports, project_path):
        print("‚ùå PyArmor obfuscation ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß")
        sys.exit(1)
    
    print("‚úÖ PyArmor: obfuscate ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à -> pyarmor_dist/")
    
    # 4.1 ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç runtime imports
    print("\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç PyArmor runtime imports...")
    if not fix_pyarmor_runtime_imports(project_path):
        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç runtime imports")
    
    # 4.2 ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö runtime files
    dist_path = project_path / 'pyarmor_dist'
    runtime_dirs = list(dist_path.glob('pyarmor_runtime_*'))
    if runtime_dirs:
        runtime_dir = runtime_dirs[0]
        print(f"‚úÖ ‡∏û‡∏ö runtime directory: {runtime_dir.name}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ __init__.py
        init_file = runtime_dir / '__init__.py'
        if not init_file.exists():
            print("‚ö†Ô∏è  ‡∏™‡∏£‡πâ‡∏≤‡∏á __init__.py ‡πÉ‡∏ô runtime directory")
            with open(init_file, 'w', encoding='utf-8') as f:
                f.write('# PyArmor Runtime\n')
    else:
        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö runtime directory")
    
    # 5. Bundle ‡∏î‡πâ‡∏ß‡∏¢ PyInstaller
    print("\nüì¶ Building ‡∏î‡πâ‡∏ß‡∏¢ PyInstaller...")
    
    # ‡∏´‡∏≤ entry file
    entry_candidates = ['autoupdate.py', 'main.py', 'app.py', 'launcher_main.py']
    entry = None
    
    for candidate in entry_candidates:
        potential_entry = project_path / 'pyarmor_dist' / candidate
        if potential_entry.exists():
            entry = potential_entry
            break
    
    if not entry:
        # ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏û‡∏ö
        obfuscated_files = list((project_path / 'pyarmor_dist').glob('*.py'))
        if obfuscated_files:
            entry = obfuscated_files[0]
    
    if not entry:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö entry file ‡πÉ‡∏ô pyarmor_dist/")
        print("üìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô pyarmor_dist:")
        for f in (project_path / 'pyarmor_dist').iterdir():
            print(f"   - {f.name}")
        sys.exit(1)
    
    print(f"üéØ Entry file: {entry}")
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á hidden imports ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PyInstaller (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô)
    hidden_imports = []
    limited_imports = sorted(list(all_imports))[:80]  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 modules
    for imp in limited_imports:
        hidden_imports.extend(['--hidden-import', imp])
    
    cmd_pyinstaller = [
        'pyinstaller',
        '--onefile',
        '--noconsole',
        '--clean',
        '--name', f'{entry.stem}_obfuscated'
    ]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° assets ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    assets_path = project_path / 'assets'
    if assets_path.exists():
        cmd_pyinstaller.extend(['--add-data', f'{assets_path};assets'])
        icon_path = assets_path / 'icon.ico'
        if icon_path.exists():
            cmd_pyinstaller.extend(['--icon', str(icon_path)])
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏° hidden imports
    cmd_pyinstaller.extend(hidden_imports)
    cmd_pyinstaller.append(str(entry))
    
    if not run_cmd(cmd_pyinstaller, 'PyInstaller build ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'):
        print("‚ö†Ô∏è  PyInstaller ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß, ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ...")
        
        # ‡∏•‡∏≠‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏á‡πà‡∏≤‡∏¢‡πÜ
        simple_pyinstaller = [
            'pyinstaller',
            '--onefile',
            '--name', f'{entry.stem}_obfuscated',
            str(entry)
        ]
        
        if not run_cmd(simple_pyinstaller, 'PyInstaller simple command ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'):
            sys.exit(1)
    
    print("‚úÖ PyInstaller: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå executable ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    
    # 6. ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ UPX (optional)
    print("\nüóúÔ∏è  ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏î‡πâ‡∏ß‡∏¢ UPX...")
    exe_name = f'{entry.stem}_obfuscated.exe'
    upx_cmd = ['upx', '--best', '--lzma', f'dist/{exe_name}']
    
    if run_cmd(upx_cmd, 'UPX compress failed'):
        print("‚úÖ UPX: ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
    else:
        print("‚ö†Ô∏è  UPX: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏µ‡∏ö‡∏≠‡∏±‡∏î‡πÑ‡∏î‡πâ (‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)")
    
    print("\nüéâ Build Process ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    print(f"üìÅ Output: dist/{exe_name}")
    print(f"üìä Total imports processed: {len(all_imports)}")
    print(f"üîê Files obfuscated: {len(all_py_files)}")

if __name__ == '__main__':
    main()