# -*- coding: utf-8 -*-
# fix_pyarmor_runtime.py - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ PyArmor runtime
import re
from pathlib import Path

def fix_pyarmor_runtime_issue():
    """‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ PyArmor runtime imports"""
    
    project_path = Path(__file__).parent
    dist_path = project_path / 'pyarmor_dist'
    
    if not dist_path.exists():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö pyarmor_dist directory")
        print("üí° ‡∏£‡∏±‡∏ô PyArmor ‡∏Å‡πà‡∏≠‡∏ô: pyarmor gen -O pyarmor_dist *.py")
        return False
    
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö pyarmor_dist...")
    
    # ‡∏´‡∏≤ runtime directory
    runtime_dirs = list(dist_path.glob('pyarmor_runtime_*'))
    if not runtime_dirs:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö pyarmor_runtime directory")
        print("üí° PyArmor ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á runtime ‡πÉ‡∏´‡πâ")
        
        # ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á runtime ‡πÉ‡∏´‡∏°‡πà
        print("üîÑ ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á runtime ‡πÉ‡∏´‡∏°‡πà...")
        import subprocess
        
        # ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå .py ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å
        py_files = list(project_path.glob('*.py'))
        if py_files:
            py_files_str = [str(f) for f in py_files if f.name != 'fix.py' | f.name != 'build.py']
            cmd = ['pyarmor', 'gen', '-O', 'pyarmor_dist'] + py_files_str
            
            try:
                subprocess.run(cmd, check=True)
                print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á PyArmor runtime ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
                runtime_dirs = list(dist_path.glob('pyarmor_runtime_*'))
            except subprocess.CalledProcessError as e:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á runtime ‡πÉ‡∏´‡∏°‡πà: {e}")
                return False
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .py ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å")
            return False
    
    if not runtime_dirs:
        print("‚ùå ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö runtime directory")
        return False
    
    runtime_dir = runtime_dirs[0]
    runtime_name = runtime_dir.name
    print(f"‚úÖ ‡∏û‡∏ö runtime: {runtime_name}")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ __init__.py ‡πÉ‡∏ô runtime
    init_file = runtime_dir / '__init__.py'
    if not init_file.exists():
        print("üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á __init__.py ‡πÉ‡∏ô runtime directory")
        with open(init_file, 'w', encoding='utf-8') as f:
            f.write(f'''# -*- coding: utf-8 -*-
# PyArmor Runtime {runtime_name}
"""PyArmor Runtime Module"""

# Import the actual runtime
try:
    from . import __pyarmor__
except ImportError:
    # Fallback import
    import __pyarmor__

__all__ = ['__pyarmor__']
''')
    
    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç imports ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    fixed_count = 0
    error_patterns = [
        r'from\s+' + re.escape(runtime_name) + r'\s+import\s+\*\*pyarmor\*\*',
        r'from\s+' + re.escape(runtime_name) + r'\s+import\s+\*pyarmor\*',
        r'import\s+\*\*pyarmor\*\*',
        r'from\s+' + re.escape(runtime_name) + r'\s+import\s+\*\*__pyarmor__\*\*'
    ]
    
    correct_import = f'from {runtime_name} import __pyarmor__'
    
    print("üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç import statements...")
    
    for py_file in dist_path.glob('*.py'):
        try:
            with open(py_file, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö import ‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î
            for pattern in error_patterns:
                content = re.sub(pattern, correct_import, content)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö import ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
            lines = content.split('\n')
            fixed_lines = []
            
            for line in lines:
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ import ‡∏ó‡∏µ‡πà‡∏°‡∏µ **pyarmor**
                if '**pyarmor**' in line:
                    if runtime_name in line:
                        fixed_line = correct_import
                        print(f"   üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {line.strip()} -> {fixed_line}")
                        fixed_lines.append(fixed_line)
                    else:
                        fixed_lines.append(line)
                # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠ import ‡∏ó‡∏µ‡πà‡∏°‡∏µ *pyarmor*
                elif '*pyarmor*' in line:
                    if runtime_name in line:
                        fixed_line = correct_import
                        print(f"   üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {line.strip()} -> {fixed_line}")
                        fixed_lines.append(fixed_line)
                    else:
                        fixed_lines.append(line)
                else:
                    fixed_lines.append(line)
            
            content = '\n'.join(fixed_lines)
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            if content != original_content:
                with open(py_file, 'w', encoding='utf-8') as f:
                    f.write(content)
                fixed_count += 1
                print(f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: {py_file.name}")
        
        except Exception as e:
            print(f"‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç {py_file.name}: {e}")
    
    if fixed_count > 0:
        print(f"\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç imports ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {fixed_count} ‡πÑ‡∏ü‡∏•‡πå")
    else:
        print("\n‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö imports ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    print("\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ import...")
    test_file = dist_path / 'autoupdate.py'
    if test_file.exists():
        try:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° runtime directory ‡πÄ‡∏Ç‡πâ‡∏≤ Python path
            import sys
            sys.path.insert(0, str(dist_path))
            
            # ‡∏•‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå
            with open(test_file, 'r', encoding='utf-8') as f:
                first_lines = f.readlines()[:5]
            
            print("üìÑ ‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á autoupdate.py:")
            for i, line in enumerate(first_lines, 1):
                print(f"   {i}: {line.rstrip()}")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ runtime directory ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if runtime_dir.exists():
                runtime_files = list(runtime_dir.glob('*'))
                print(f"\nüìÅ ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô {runtime_name}:")
                for rf in runtime_files:
                    print(f"   - {rf.name}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
    
    print("\nüéâ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç PyArmor runtime!")
    print("üí° ‡∏•‡∏≠‡∏á‡∏£‡∏±‡∏ô autoupdate.py ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    
    return True

if __name__ == '__main__':
    print("üîß PyArmor Runtime Fixer")
    print("=" * 40)
    fix_pyarmor_runtime_issue()